{"version":3,"sources":["util/interact.js","images/logo.png","images/351.png","Status.js","Minter.js","App.js","index.js"],"names":["require","config","contractABI","web3","createAlchemyWeb3","process","connectWallet","a","chainId","window","ethereum","networkVersion","request","method","params","utils","toHex","code","chainName","nativeCurrency","name","decimals","symbol","rpcUrls","addressArray","getNumberOfMintedNfts","eth","Contract","contract","methods","call","mintNFT","transactionParameters","to","from","selectedAddress","data","safeMint","encodeABI","txHash","Status","status","onConnectToMetaMaskClick","className","target","href","onClick","Minter","useState","walletAddress","setWallet","setStatus","setError","isMintingEnabled","setMintingEnabled","setTxHash","numberOfMintedNfts","setNumberOfMintedNfts","setName","description","setDescription","url","setURL","addWalletListener","on","accounts","length","useEffect","n","mintingEnabled","mintEnabled","connectWalletPressed","wallet","onMintPressed","hash","src","logo","alt","xmlns","viewBox","d","picture","substring","id","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ihPAAAA,EAAQ,KAAUC,SAClB,IAAMC,EAAcF,EAAQ,KAEtBG,GAAOC,EADiBJ,EAAQ,KAA9BI,mBACuBC,6EAElBC,EAAa,uCAAG,8BAAAC,EAAA,yDAErBC,EAAU,IAEZC,OAAOC,SAASC,iBAAmBH,EAJZ,0CAMjBC,OAAOC,SAASE,QAAQ,CAC5BC,OAAQ,6BACRC,OAAQ,CAAC,CAAEN,QAASL,EAAKY,MAAMC,MAAMR,OARhB,0DAYN,OAAb,KAAIS,OAA+B,QAAd,KAAIA,KAZN,kCAafR,OAAOC,SAASE,QAAQ,CAC5BC,OAAQ,0BACRC,OAAQ,CACN,CACEI,UAAW,kBACXV,QAASL,EAAKY,MAAMC,MAAMR,GAC1BW,eAAgB,CAAEC,KAAM,QAASC,SAAU,GAAIC,OAAQ,SACvDC,QAAS,CAAC,gCApBK,mCA4BId,OAAOC,SAASE,QAAQ,CACjDC,OAAQ,wBA7Ba,eA4BjBW,EA5BiB,yBA+BhBA,EAAa,IA/BG,4DAiChB,IAjCgB,iEAAH,qDAsCbC,EAAqB,uCAAG,sBAAAlB,EAAA,sEACX,IAAIJ,EAAKuB,IAAIC,SAASzB,EAAaG,8CADxB,cACnCI,OAAOmB,SAD4B,gBAEtBnB,OAAOmB,SAASC,QAAQJ,wBAAwBK,OAF1B,mFAAH,qDAKrBC,EAAO,uCAAG,8BAAAxB,EAAA,sEAEG,IAAIJ,EAAKuB,IAAIC,SAASzB,EAAaG,8CAFtC,cAErBI,OAAOmB,SAFc,OAIfI,EAAwB,CAC5BC,GAAI5B,6CACJ6B,KAAMzB,OAAOC,SAASyB,gBACtBC,KAAM3B,OAAOmB,SAASC,QACjBQ,WACFC,aATgB,kBAaE7B,OAAOC,SAASE,QAAQ,CAC3CC,OAAQ,sBACRC,OAAQ,CAACkB,KAfQ,cAabO,EAba,yBAiBZA,GAjBY,2DAmBZ,IAnBY,0DAAH,qDChDL,MAA0B,iCCA1B,MAA0B,gC,gBCgB1BC,EAhBA,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,yBAEvB,OACE,qBAAIC,UAAU,SAAd,UACE,qBAAIA,UAAsB,sBAAXF,GAA6C,kBAAXA,EAA6B,eAAiB,KAA/F,mCAA2H,mBAAGG,OAAO,SAASC,KAAK,oCAAxB,yBAC3H,oBAAIF,UAAsB,kBAAXF,EAA6B,eAAiB,KAA7D,SACc,sBAAXA,EACG,wBAAQE,UAAU,kBAAkBG,QAASJ,EAA7C,4BACA,0DAGN,0CCCAxC,EAAcF,EAAQ,KAEtBG,GAAOC,EADiBJ,EAAQ,KAA9BI,mBACuBC,6EA2HhB0C,EAzHA,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACZC,EADY,KACGC,EADH,OAISF,mBAAS,oBAJlB,mBAIZP,EAJY,KAIJU,EAJI,OAKOH,mBAAS,IALhB,mBAKLI,GALK,aAM2BJ,mBAAS,MANpC,mBAMZK,EANY,KAMMC,EANN,OAOSN,mBAAS,IAPlB,mBAOZT,EAPY,KAOJgB,EAPI,OAQiCP,qBARjC,mBAQZQ,EARY,KAQQC,EARR,OAUKT,mBAAS,IAVd,mBAUZ5B,EAVY,KAUNsC,EAVM,OAWmBV,mBAAS,IAX5B,mBAWZW,EAXY,KAWCC,EAXD,OAYGZ,mBAAS,IAZZ,mBAYZa,EAZY,KAYPC,EAZO,KAgDnB,SAASC,IACHtD,OAAOC,UACTD,OAAOC,SAASsD,GAAG,mBAAmB,SAACC,GACjCA,EAASC,OAAS,IACpBhB,EAAUe,EAAS,IACnBd,EAAU,qBAvClBgB,oBAAS,sBAAC,4BAAA5D,EAAA,sEACQkB,IADR,OACF2C,EADE,OAERX,EAAsBW,GAFd,2CAGP,IAEHD,oBAAS,sBAAC,8BAAA5D,EAAA,sEAEgB,IAAIJ,EAAKuB,IAAIC,SAASzB,EAAaG,8CAFnD,cAERI,OAAOmB,SAFC,gBAGgBnB,OAAOmB,SAASC,QAAQwC,iBAAiBvC,OAHzD,UAGJwC,EAHI,OAIRhB,EAAkBgB,IAGd7D,OAAOC,WAAY4D,EAPf,wBASNnB,EAAU,qBATJ,mBAYuB1C,OAAOC,SAASE,QAAQ,CACjDC,OAAQ,iBAbN,SAYEW,EAZF,QAgBa0C,OAAS,IACxBhB,EAAU1B,EAAa,IACvB2B,EAAU,kBAlBR,yDAqBJC,EAAS,EAAD,IArBJ,2BA0BRW,IA1BQ,0DA2BP,IAaH,IAAMQ,EAAoB,uCAAG,4BAAAhE,EAAA,sEACND,IADM,OACrBkE,EADqB,OAG3BrB,EAAoB,IAAVqB,EAAe,gBAAkB,qBAC3CtB,EAAUsB,GAJiB,2CAAH,qDAOpBC,EAAa,uCAAG,4BAAAlE,EAAA,sEACDwB,EAAQ8B,EAAKzC,EAAMuC,GADlB,OAGR,KAFNe,EADc,UAIlBhB,EAAQ,IACRE,EAAe,IACfE,EAAO,IACPP,EAAUmB,IAPQ,2CAAH,qDAWnB,OAAyB,OAArBrB,EACK,6BAGJA,EAKH,sBAAKV,UAAU,SAAf,UAEE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,OAAOgC,IAAKC,EAAMC,IAAI,oBACrC,4CACA,qBAAKlC,UAAU,oBAAoBmC,MAAM,6BAA6BC,QAAQ,cAA9E,SACE,sBAAMC,EAAE,mRAIZ,cAAC,EAAD,CAAQvC,OAAQA,EAAQC,yBAA0B6B,IAEtC,kBAAX9B,GACC,sBAAKE,UAAU,iBAAf,UACE,qBAAKA,UAAU,eAAegC,IAAKM,EAASJ,IAAI,kBAE9C5B,EAAciB,OAAS,GAAK,4CAAejB,EAAciC,UAAU,EAAG,GAAK,MAAQjC,EAAciC,UAAU,OAE7G,wBAAQC,GAAG,aAAarC,QAAS2B,EAAjC,yBAMQ,KAAXlC,GACC,2DAA6B,mBAAGM,KAAI,4CAAuCN,GAA9C,8CAG9BiB,GACC,yCAAYA,EAAZ,eAjCG,gFCvFI4B,MARf,WACE,OACE,qBAAKzC,UAAU,MAAf,SACE,cAAC,EAAD,OCDN0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a0c711a5.chunk.js","sourcesContent":["require(\"dotenv\").config();\nconst contractABI = require('../contractAbi.json')\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(process.env.REACT_APP_ALCHEMY_KEY);\n\nexport const connectWallet = async () => {\n\n  const chainId = 137 // Polygon Mainnet\n\n  if (window.ethereum.networkVersion !== chainId) {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: web3.utils.toHex(chainId) }]\n      });\n    } catch (err) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (err.code === 4902 || err.code === -32603) {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [\n            {\n              chainName: 'Polygon Mainnet',\n              chainId: web3.utils.toHex(chainId),\n              nativeCurrency: { name: 'MATIC', decimals: 18, symbol: 'MATIC' },\n              rpcUrls: ['https://polygon-rpc.com/']\n            }\n          ]\n        });\n      }\n    }\n\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      return addressArray[0];\n    } catch (err) {\n      return '';\n    }\n  }\n};\n\nexport const getNumberOfMintedNfts = async () => {\n  window.contract = await new web3.eth.Contract(contractABI, process.env.REACT_APP_CONTRACT_ADDRESS);\n  return await window.contract.methods.getNumberOfMintedNfts().call()\n}\n\nexport const mintNFT = async () => {\n\n  window.contract = await new web3.eth.Contract(contractABI, process.env.REACT_APP_CONTRACT_ADDRESS);\n\n  const transactionParameters = {\n    to: process.env.REACT_APP_CONTRACT_ADDRESS, // Required except during contract publications.\n    from: window.ethereum.selectedAddress, // must match user's active address.\n    data: window.contract.methods\n        .safeMint()\n      .encodeABI(),\n  };\n\n  try {\n    const txHash = await window.ethereum.request({\n      method: \"eth_sendTransaction\",\n      params: [transactionParameters],\n    });\n    return txHash;\n  } catch (error) {\n    return '';\n  }\n};\n","export default __webpack_public_path__ + \"static/media/logo.72f9554a.png\";","export default __webpack_public_path__ + \"static/media/351.5f790bed.png\";","const Status = ({status, onConnectToMetaMaskClick}) => {\n\n  return (\n    <ol className=\"status\">\n      <li className={status === 'CONNECT_TO_WALLET' || status === 'MINTING_READY' ? 'line-through' : null}>Installer og sett opp <a target=\"_blank\" href=\"https://metamask.io/download.html\">Metamask</a></li>\n      <li className={status === 'MINTING_READY' ? 'line-through' : null}>\n        {status === 'CONNECT_TO_WALLET'\n          ? <button className=\"metamask-button\" onClick={onConnectToMetaMaskClick}>Connect wallet</button>\n          : <>Koble til wallet</>\n        }\n      </li>\n      <li>Mint</li>\n    </ol>\n  );\n};\n\nexport default Status;\n","import { useEffect, useState } from \"react\";\nimport {\n  connectWallet,\n  getCurrentWalletConnected,\n  getNumberOfMintedNfts,\n  mintNFT,\n} from \"./util/interact.js\";\nimport logo from './images/logo.png';\nimport picture from './images/351.png';\nimport './Minter.css';\nimport Status from './Status';\n\nconst contractABI = require('./contractAbi.json')\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(process.env.REACT_APP_ALCHEMY_KEY);\n\nconst Minter = () => {\n  const [walletAddress, setWallet] = useState(\"\");\n  \n  // INSTALL_METAMASK, CONNECT_TO_WALLET, MINTING_READY\n  const [status, setStatus] = useState(\"INSTALL_METAMASK\");\n  const [error, setError] = useState(\"\");\n  const [isMintingEnabled, setMintingEnabled] = useState(null);\n  const [txHash, setTxHash] = useState('');\n  const [numberOfMintedNfts, setNumberOfMintedNfts] = useState();\n\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n\n  useEffect(async () => {\n    const n = await getNumberOfMintedNfts();\n    setNumberOfMintedNfts(n);\n  }, [])\n\n  useEffect(async () => {\n\n    window.contract = await new web3.eth.Contract(contractABI, process.env.REACT_APP_CONTRACT_ADDRESS);\n    let mintEnabled = await window.contract.methods.mintingEnabled().call();\n    setMintingEnabled(mintEnabled);\n\n    \n    if (window.ethereum && mintEnabled) {\n\n      setStatus('CONNECT_TO_WALLET');\n      // Get current wallet\n      try {\n        const addressArray = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n\n        if (addressArray.length > 0) {\n          setWallet(addressArray[0]);\n          setStatus('MINTING_READY');\n        }\n      } catch (err) {\n        setError(err);\n        return;\n      }\n    }\n\n    addWalletListener();\n  }, []);\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"MINTING_READY\");\n        }\n      });\n    }\n  }\n\n  const connectWalletPressed = async () => {\n    const wallet = await connectWallet();\n\n    setStatus(wallet != '' ? 'MINTING_READY' : 'CONNECT_TO_WALLET')\n    setWallet(wallet);\n  };\n\n  const onMintPressed = async () => {\n    const hash = await mintNFT(url, name, description);\n\n    if (hash != '') {\n      setName(\"\");\n      setDescription(\"\");\n      setURL(\"\");\n      setTxHash(hash);\n    }\n  };\n\n  if (isMintingEnabled === null) {\n    return <></>;\n  }\n\n  if (!isMintingEnabled) {\n    return <div>Minting is paused, please come back later...</div>;\n  }\n\n  return (\n    <div className=\"Minter\">\n\n      <div className=\"intro\">\n        <img className=\"logo\" src={logo} alt=\"SpareBank1 logo\" />\n        <h1>NFT Minter</h1>\n        <svg className=\"scroll-down-arrow\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\">\n          <path d=\"M374.6 310.6l-160 160C208.4 476.9 200.2 480 192 480s-16.38-3.125-22.62-9.375l-160-160c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 370.8V64c0-17.69 14.33-31.1 31.1-31.1S224 46.31 224 64v306.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0S387.1 298.1 374.6 310.6z\"/>\n        </svg>\n      </div>\n\n      <Status status={status} onConnectToMetaMaskClick={connectWalletPressed}/>\n\n      {status === 'MINTING_READY' &&\n        <div className=\"mint-container\">\n          <img className=\"mint-example\" src={picture} alt=\"Eksempelbilde\" />\n          {\n            walletAddress.length > 0 && <span>Wallet: {walletAddress.substring(0, 6) + \"...\" + walletAddress.substring(38)}</span>\n          }\n          <button id=\"mintButton\" onClick={onMintPressed}>\n            Mint NFT\n          </button>\n        </div>\n      }\n\n      {txHash !== '' && \n        <p>Grattis, du kan sjekke ut <a href={`https://mumbai.polygonscan.com/tx/${txHash}`}>transaksjonen på Etherscan</a></p>\n      }\n\n      {numberOfMintedNfts && \n        <p>Supply: {numberOfMintedNfts} / 448</p>\n      }\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}